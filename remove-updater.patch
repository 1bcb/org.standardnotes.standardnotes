diff --git a/app/application.ts b/app/application.ts
index ac20e746..0c7ded08 100644
--- a/app/application.ts
+++ b/app/application.ts
@@ -16,7 +16,6 @@ import { IpcMessages } from './javascripts/shared/ipcMessages';
 import { isDev, isTesting } from './javascripts/main/utils';
 import { indexUrl } from './javascripts/main/paths';
 import { action, makeObservable, observable } from 'mobx';
-import { UpdateState } from './javascripts/main/updateManager';
 import { handle } from './javascripts/main/testing';
 import { MessageType } from '../test/TestIpcMessage';
 
@@ -28,8 +27,6 @@ export class AppState {
   public willQuitApp = false;
   public lastBackupDate: number | null = null;
   public windowState?: WindowState;
-  public readonly updates: UpdateState;
-
   constructor(app: Electron.App) {
     this.version = app.getVersion();
     this.store = new Store(app.getPath('userData'));
@@ -38,7 +35,6 @@ export class AppState {
       lastBackupDate: observable,
       setBackupCreationDate: action,
     });
-    this.updates = new UpdateState(this);
 
     if (isTesting()) {
       handle(MessageType.AppStateCall, (method, ...args) => {
diff --git a/app/javascripts/main/menus.ts b/app/javascripts/main/menus.ts
index 169b4e9e..a4ab71ae 100644
--- a/app/javascripts/main/menus.ts
+++ b/app/javascripts/main/menus.ts
@@ -18,11 +18,6 @@ import { Store, StoreKeys } from './store';
 import { appMenu as str, contextMenu } from './strings';
 import { handle } from './testing';
 import { TrayManager } from './trayManager';
-import {
-  checkForUpdate,
-  openChangelog,
-  showUpdateInstallationDialog,
-} from './updateManager';
 import { isDev, isTesting } from './utils';
 
 export const enum MenuId {
@@ -177,7 +172,6 @@ export function createMenuManager({
       viewMenu(window, store, reload),
       windowMenu(store, trayManager, reload),
       backupsMenu(backupsManager, reload),
-      updateMenu(window, appState),
       ...(isLinux() ? [keyringMenu(window, store)] : []),
       helpMenu(window, shell),
     ]);
@@ -531,83 +525,6 @@ function backupsMenu(archiveManager: BackupsManager, reload: () => any) {
   };
 }
 
-function updateMenu(window: BrowserWindow, appState: AppState) {
-  const updateState = appState.updates;
-  let label;
-  if (updateState.checkingForUpdate) {
-    label = str().checkingForUpdate;
-  } else if (updateState.updateNeeded) {
-    label = str().updateAvailable;
-  } else {
-    label = str().updates;
-  }
-  const submenu: MenuItemConstructorOptions[] = [];
-  const structure = { label, submenu };
-
-  if (updateState.autoUpdateDownloaded && updateState.latestVersion) {
-    submenu.push({
-      label: str().installPendingUpdate(updateState.latestVersion),
-      click() {
-        showUpdateInstallationDialog(window, appState);
-      },
-    });
-  }
-
-  submenu.push({
-    type: 'checkbox',
-    checked: updateState.enableAutoUpdate,
-    label: str().enableAutomaticUpdates,
-    click() {
-      updateState.toggleAutoUpdate();
-    },
-  });
-
-  const latestVersion = updateState.latestVersion;
-
-  submenu.push(Separator);
-
-  submenu.push({
-    label: str().yourVersion(appState.version),
-  });
-
-  submenu.push({
-    label: latestVersion
-      ? str().latestVersion(latestVersion)
-      : str().releaseNotes,
-    click() {
-      openChangelog(updateState);
-    },
-  });
-
-  if (latestVersion) {
-    submenu.push({
-      label: str().viewReleaseNotes(latestVersion),
-      click() {
-        openChangelog(updateState);
-      },
-    });
-  }
-
-  submenu.push(Separator);
-
-  if (!updateState.checkingForUpdate) {
-    submenu.push({
-      label: str().checkForUpdate,
-      click() {
-        checkForUpdate(appState, updateState, true);
-      },
-    });
-  }
-
-  if (updateState.lastCheck && !updateState.checkingForUpdate) {
-    submenu.push({
-      label: str().lastUpdateCheck(updateState.lastCheck),
-    });
-  }
-
-  return structure;
-}
-
 function helpMenu(window: Electron.BrowserWindow, shell: Electron.Shell) {
   return {
     role: Roles.Help,
diff --git a/app/javascripts/main/updateManager.ts b/app/javascripts/main/updateManager.ts
deleted file mode 100644
index 038e14f6..00000000
--- a/app/javascripts/main/updateManager.ts
+++ /dev/null
@@ -1,255 +0,0 @@
-import compareVersions from 'compare-versions';
-import { BrowserWindow, dialog, shell } from 'electron';
-import electronLog from 'electron-log';
-import { autoUpdater } from 'electron-updater';
-import { action, autorun, computed, makeObservable, observable } from 'mobx';
-import { MessageType } from '../../../test/TestIpcMessage';
-import { AppState } from '../../application';
-import { BackupsManager } from './backupsManager';
-import { isMac } from './platforms';
-import { StoreKeys } from './store';
-import { updates as str } from './strings';
-import { handle } from './testing';
-import { isTesting } from './utils';
-
-// eslint-disable-next-line @typescript-eslint/no-explicit-any
-function logError(...message: any) {
-  console.error('updateManager:', ...message);
-}
-
-if (isTesting()) {
-  // eslint-disable-next-line no-var
-  var notifiedStateUpdate = false;
-}
-
-export class UpdateState {
-  latestVersion: string | null = null;
-  enableAutoUpdate: boolean;
-  checkingForUpdate = false;
-  autoUpdateDownloaded = false;
-  lastCheck: Date | null = null;
-
-  constructor(private appState: AppState) {
-    this.enableAutoUpdate = appState.store.get(StoreKeys.EnableAutoUpdate);
-    makeObservable(this, {
-      latestVersion: observable,
-      enableAutoUpdate: observable,
-      checkingForUpdate: observable,
-      autoUpdateDownloaded: observable,
-      lastCheck: observable,
-
-      updateNeeded: computed,
-
-      toggleAutoUpdate: action,
-      setCheckingForUpdate: action,
-      autoUpdateHasBeenDownloaded: action,
-      checkedForUpdate: action,
-    });
-
-    if (isTesting()) {
-      handle(MessageType.UpdateState, () => ({
-        lastCheck: this.lastCheck,
-      }));
-    }
-  }
-
-  get updateNeeded(): boolean {
-    if (this.latestVersion) {
-      return compareVersions(this.latestVersion, this.appState.version) === 1;
-    } else {
-      return false;
-    }
-  }
-
-  toggleAutoUpdate(): void {
-    this.enableAutoUpdate = !this.enableAutoUpdate;
-    this.appState.store.set(StoreKeys.EnableAutoUpdate, this.enableAutoUpdate);
-  }
-
-  setCheckingForUpdate(checking: boolean): void {
-    this.checkingForUpdate = checking;
-  }
-
-  autoUpdateHasBeenDownloaded(version: string | null): void {
-    this.autoUpdateDownloaded = true;
-    this.latestVersion = version;
-  }
-
-  checkedForUpdate(latestVersion: string | null): void {
-    this.lastCheck = new Date();
-    this.latestVersion = latestVersion;
-  }
-}
-
-let updatesSetup = false;
-
-export function setupUpdates(
-  window: BrowserWindow,
-  appState: AppState,
-  backupsManager: BackupsManager
-): void {
-  if (updatesSetup) {
-    throw Error('Already set up updates.');
-  }
-  const { store } = appState;
-
-  autoUpdater.logger = electronLog;
-
-  const updateState = appState.updates;
-
-  function checkUpdateSafety() {
-    const isSafeToUpdate =
-      appState.store.get(StoreKeys.BackupsDisabled) ||
-      (updateState.enableAutoUpdate &&
-        typeof appState.lastBackupDate === 'number' &&
-        isLessThanOneHourFromNow(appState.lastBackupDate));
-    autoUpdater.autoInstallOnAppQuit = isSafeToUpdate;
-    autoUpdater.autoDownload = isSafeToUpdate;
-  }
-  autorun(checkUpdateSafety);
-
-  const oneHour = 1 * 60 * 60 * 1000;
-  setInterval(checkUpdateSafety, oneHour);
-
-  autoUpdater.on('update-downloaded', (info: { version?: string }) => {
-    window.webContents.send('update-available', null);
-    updateState.autoUpdateHasBeenDownloaded(info.version || null);
-  });
-
-  autoUpdater.on('error', logError);
-  autoUpdater.on('update-available', (info: { version?: string }) => {
-    updateState.checkedForUpdate(info.version || null);
-    backupsManager.performBackup();
-  });
-  autoUpdater.on('update-not-available', (info: { version?: string }) => {
-    updateState.checkedForUpdate(info.version || null);
-  });
-
-  updatesSetup = true;
-
-  if (isTesting()) {
-    handle(MessageType.AutoUpdateEnabled, () =>
-      store.get(StoreKeys.EnableAutoUpdate)
-    );
-    handle(MessageType.CheckForUpdate, () =>
-      checkForUpdate(appState, updateState)
-    );
-    handle(
-      MessageType.UpdateManagerNotifiedStateChange,
-      () => notifiedStateUpdate
-    );
-  } else {
-    checkForUpdate(appState, updateState);
-  }
-}
-
-export function openChangelog(state: UpdateState): void {
-  const url = 'https://github.com/standardnotes/desktop/releases';
-  if (state.latestVersion) {
-    shell.openExternal(`${url}/tag/v${state.latestVersion}`);
-  } else {
-    shell.openExternal(url);
-  }
-}
-
-function quitAndInstall(window: BrowserWindow) {
-  setTimeout(() => {
-    // index.js prevents close event on some platforms
-    window.removeAllListeners('close');
-    window.close();
-    autoUpdater.quitAndInstall(false);
-  }, 0);
-}
-
-function isLessThanOneHourFromNow(date: number) {
-  const now = Date.now();
-  const onHourMs = 1 * 60 * 60 * 1000;
-  return now - date < onHourMs;
-}
-
-export async function showUpdateInstallationDialog(
-  parentWindow: BrowserWindow,
-  appState: AppState
-): Promise<void> {
-  if (!appState.updates.latestVersion) return;
-  if (
-    appState.lastBackupDate &&
-    isLessThanOneHourFromNow(appState.lastBackupDate)
-  ) {
-    const result = await dialog.showMessageBox(parentWindow, {
-      type: 'info',
-      title: str().updateReady.title,
-      message: str().updateReady.message(appState.updates.latestVersion),
-      buttons: [
-        str().updateReady.installLater,
-        str().updateReady.installAndRestart,
-      ],
-      cancelId: 0,
-    });
-
-    const buttonIndex = result.response;
-    if (buttonIndex === 1) {
-      quitAndInstall(parentWindow);
-    }
-  } else {
-    const cancelId = 0;
-    const result = await dialog.showMessageBox({
-      type: 'warning',
-      title: str().updateReady.title,
-      message: str().updateReady.noRecentBackupMessage,
-      detail: str().updateReady.noRecentBackupDetail(appState.lastBackupDate),
-      checkboxLabel: str().updateReady.noRecentBackupChecbox,
-      checkboxChecked: false,
-      buttons: [
-        str().updateReady.installLater,
-        isMac()
-          ? str().updateReady.installAndRestart
-          : str().updateReady.quitAndInstall,
-      ],
-      cancelId,
-    });
-
-    if (!result.checkboxChecked || result.response === cancelId) {
-      return;
-    }
-    quitAndInstall(parentWindow);
-  }
-}
-
-export async function checkForUpdate(
-  appState: AppState,
-  state: UpdateState,
-  userTriggered = false
-): Promise<void> {
-  if (state.enableAutoUpdate || userTriggered) {
-    state.setCheckingForUpdate(true);
-    try {
-      const { updateInfo } = await autoUpdater.checkForUpdates();
-      state.checkedForUpdate(updateInfo.version);
-
-      if (userTriggered) {
-        let message;
-        if (state.updateNeeded && state.latestVersion) {
-          message = str().finishedChecking.updateAvailable(state.latestVersion);
-        } else {
-          message = str().finishedChecking.noUpdateAvailable(appState.version);
-        }
-
-        dialog.showMessageBox({
-          title: str().finishedChecking.title,
-          message,
-        });
-      }
-    } catch (error) {
-      logError('Exception caught while checking for autoupdates:', error);
-      if (userTriggered) {
-        dialog.showMessageBox({
-          title: str().finishedChecking.title,
-          message: str().finishedChecking.error(JSON.stringify(error)),
-        });
-      }
-    } finally {
-      state.setCheckingForUpdate(false);
-    }
-  }
-}
diff --git a/app/javascripts/main/window.ts b/app/javascripts/main/window.ts
index 3ea9e94e..8041e83a 100644
--- a/app/javascripts/main/window.ts
+++ b/app/javascripts/main/window.ts
@@ -21,7 +21,6 @@ import { createSpellcheckerManager } from './spellcheckerManager';
 import { Store, StoreKeys } from './store';
 import { handle, send } from './testing';
 import { createTrayManager, TrayManager } from './trayManager';
-import { checkForUpdate, setupUpdates } from './updateManager';
 import { isTesting, lowercaseDriveLetter } from './utils';
 import { initializeZoomManager } from './zoomManager';
 import { preloadJsPath } from './paths';
@@ -119,7 +118,6 @@ function createWindowServices(
     appState,
     ipcMain
   );
-  const updateManager = setupUpdates(window, appState, backupsManager);
   const trayManager = createTrayManager(window, appState.store);
   const spellcheckerManager = createSpellcheckerManager(
     appState.store,
@@ -139,7 +137,6 @@ function createWindowServices(
   });
   return {
     backupsManager,
-    updateManager,
     trayManager,
     spellcheckerManager,
     menuManager,
@@ -191,10 +188,6 @@ function registerWindowEventListeners({
 
   window.on('closed', onClosed);
 
-  window.on('show', () => {
-    checkForUpdate(appState, appState.updates, false);
-  });
-
   window.on('focus', () => {
     window.webContents.send(IpcMessages.WindowFocused, null);
   });
diff --git a/package.json b/package.json
index f8194754..db4471c2 100644
--- a/package.json
+++ b/package.json
@@ -11,7 +11,6 @@
     "compare-versions": "^3.6.0",
     "decrypt": "github:standardnotes/decrypt#master",
     "electron-log": "^4.2.2",
-    "electron-updater": "^4.3.4",
     "mime-types": "^2.1.27",
     "mobx": "^6.0.3"
   },
